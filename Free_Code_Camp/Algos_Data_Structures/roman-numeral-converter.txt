function convertToRoman(num) {
 function romanNumerialCreator(number, base){
        
  function addSingles(numberOfOnesNeeded, base){
            let singleOnes = "";
            for (let i = 0; i < numberOfOnesNeeded; i++) {
              singleOnes += nums[base]
            }
          return singleOnes
          }
        
          switch (number) {
            case 1:
            case 2:
            case 3:
            romanNumerial = addSingles(number, base) + romanNumerial;
              break

            case 4:
             romanNumerial = nums[40 + base] + romanNumerial;
              break;
              
            case 5:
            romanNumerial = nums[50 + base] + romanNumerial;
            break
              
            case 6:
            case 7:
            case 8:
              romanNumerial = nums[50 + base] + addSingles(number - 5, base) + romanNumerial;
              break

            case 9:
            romanNumerial = nums[base] + nums[base + 1] + romanNumerial;
              break

            default:
              break;
            }
          // if (number === 0) return ;
          // if (number === 4 ) return romanNumerial.unshift(nums[40 + base]) 
          // if (number === 5) return romanNumerial.unshift(nums[50 + base])
          // if (number === 9) return romanNumerial.unshift(nums[base] + nums[base + 1])
          // if (number < 4) return romanNumerial.unshift(addSingles(number, base))
          // if (number > 5) return romanNumerial.unshift(nums[50 + base] + addSingles(number - 5, base))
          
        }
        
        const nums = {
          0: "I",
          40: "IV",
          50: "V",
          1: "X",
          41: "XL",
          51: "L",
          2: "C",
          42: "CD",
          52: "D",
          3: "M",
        };
      let romanNumerial = ""
      let postionOfWorkingNumberFromRightToLeft = 0;
      let toBeConvert = String(num).split('')
      

      while (toBeConvert.length > 0) {
        let workingNumber = Number(toBeConvert.pop())
        romanNumerialCreator(workingNumber, postionOfWorkingNumberFromRightToLeft)
        postionOfWorkingNumberFromRightToLeft += 1;
      }
      
      return romanNumerial;
}

convertToRoman(36);
